generate_model_layer:
  description: >
      Based on the {api_result} Requirements for the Spring Boot Application, create a fully functional Spring Boot application with the following steps:
        - Persistence Layer:
            - Generate JPA entity classes using the `jakarta.persistence` package (not `javax.persistence`) and add Lombok annotations (`@Getter`, `@Setter`, and optionally `@NoArgsConstructor` and `@AllArgsConstructor`) to entity classes to auto-generate getters and setters.
            - Create Spring Data JPA repository interfaces.
            - Append `_entity` to all table names in the `schema.sql` file and JPA `@Table` annotations to avoid clashes with reserved keywords and ensuring that `@Table` annotations match the table names in `schema.sql`.
            - Write `schema.sql` and `data.sql` files for the H2 database in `/src/main/resources/`.
            - Compare generated JPA entity classes and created JPA repository interfaces against the task list provided by the tech lead and perform any missing tasks.
        - Service Layer:
            - Implement business logic methods to interact with the repository layer for CRUD operations for all API endpoints.
            - Compare generated service classes against the task list provided by the tech lead and perform any missing tasks.
        - Controller Layer:
            - Create REST controllers with appropriate mappings for all API endpoints.
            - Compare generated controllers against the task list provided by the tech lead and perform any missing tasks.
  expected_output: >
    A complete and runnable Spring Boot project written to {models_path} in the appropriate folder structure, including all the entity,service,repositary and controller files. All persistence-layer code should use `jakarta.persistence`.



generate_service_layer:
  description: >
    Extract relevant information from {api_result} to generate the service layer for the Spring Boot application.
    Based on the extracted service methods, create a fully functional service layer with the following steps:
    - Identify all service methods from {api_result} and generate corresponding Java service classes.
    - Implement methods in the service classes to interact with the model layer for all CRUD operations.
    - Identify necessary repository methods that need to be defined for data access.
    - Create corresponding Spring Data JPA repository interfaces based on the service layer requirements.
    - Implement custom query methods in the repository layer using derived queries or `@Query` annotations where necessary.
    - Compare generated service classes and repository interfaces against the task list provided in {api_result} by the tech lead and perform any missing tasks.

  expected_output: >
    Java service class files for handling business logic, adhering to the existing boilerplate folder structure at {folder_path}.
    - The generated files should be placed in the existing boilerplate folder structure within {folder_path}.
    - If no folder exists at {folder_path}, create a folder named `service` in the same path and place the generated files inside.
    - Ensure service classes follow Spring Boot best practices and are properly structured.
    
    Java repository interface files dynamically generated based on service layer requirements.
    - The generated files should be placed in the existing boilerplate folder structure at {folder_path}.
    - If no folder exists at {folder_path}, create a folder named `repository` in the same path and place the generated files inside.
    - Ensure repository interfaces include all necessary methods required by the service layer.